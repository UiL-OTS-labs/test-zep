#!/usr/bin/env zep-2.0

/*************** importing plugins *********/
plugin zep_display;
plugin zep_string;
plugin zep_struct;
plugin zep_ioteensy;
plugin zep_iospp;

import stats;
import io_spp_settings;

/*************** Zep specific **************/
// Continue is normally defined in defs.zm or since Zep-2.0 in std_control.zm
const int CONTINUE          = 0;

/*************** global variables **********/
int g_width                 = 500;
int g_height                = 500;
int g_fps                   = 60;
int g_nframes               = 1;        // Length of stimulus in frames.
int g_tot_frames            = 60 * 60;  // One minute.
bool g_verbose              = false;
string g_fn;                      // output filename.
    
real        g_stim_dur;           // expected stimulus duration.
real        g_frame_dur;          // theoretical frame duration.

bool g_terminate_on_finish  = true;

const int PHOTO_DIODE_PIN   = 10;
const int SPP_PIN           = 12;

/*************** utilities ********/

record Output
{
    int timestamp;
    int logic_level;
}

void array_append(real[] ar, real value)
{
    ar.size         = ar.size + 1;
    ar[ar.size - 1] = value;
}

void array_append(int[] ar, int value)
{
    ar.size         = ar.size + 1;
    ar[ar.size - 1] = value;
}

void set_expected_durations(real fdur_us, real sdur_us)
{
    g_stim_dur  = sdur_us;
    g_frame_dur = fdur_us;
}

/*************** output **********/

Output[..]  output;
int[..]     spp_on;
int[..]     spp_off;

void recordOutput()
{
    int i;                      // index
    int mframe;                 // missed frame
    int sframe;                 // short frames. (stimulus to short presented)
    real [..]     disp_on;      // display on.
    real [..]     disp_off;     // display off.
    int fd = 4;
    real frame_dur;
    real stim_dur;

    string log_fn;
    open_log(fd);

    // Demultiplex into on and off.
    i = 0;
    while(i < output.size) {
        if (output[i].logic_level)
            array_append(disp_on, output[i].timestamp);
        else
            array_append(disp_off, output[i].timestamp);
        i++;
    }

    if(disp_on.size != disp_off.size ||
        disp_off.size != spp_on.size ||
        spp_on.size != spp_off.size)
    {
        print_error("Oops not all arrays are of equal size.\n");
    }
    
    i = 0;
    log(fd, "spp_on\tspp_of\tmon_on\tmon_off\n");
    while (i < spp_off.size)
    {
        log(fd, ""); 
        if (i < spp_on.size)
            log(fd, "" + spp_on[i]);
        log(fd, "\t");
        if (i < spp_off.size)
            log(fd, "" + spp_off[i]);
        log(fd, "\t");
        if (i < disp_on.size)
            log(fd, "" + disp_on[i]);
        log(fd, "\t");
        if (i < disp_off.size)
            log(fd, "" + disp_off[i]);
        log(fd, "\n");
        i++;
    }

    log_fn = log_filename(fd);
    flush_log(fd);
    close_log(fd);
    move_file(log_fn, g_fn);
}

/*************** objects ****************/

SPP spp
{
    cleanup()
    {
        write_data(0);
        close();
    }
}

Timer spp_timer
{
    const int high = 0xFF;
    const int low  = 0x00;

    int state;

    on_event:expire()
    {
        spp.write_data(state);
        if (state) state = low;
        else       state = high;
        
        int nwin = test_window.target_head;
        time cur_display = display_device.current_frame_time[nwin];

        dur time_diff = dur(abs(real(event_time) - real(cur_display)));

        if (time_diff > 3.1415ms)
            // Missed (a/multiple) frame(s), hence sync with expire time
            start(expire_time + dur(g_stim_dur) / 1000);
        else
            // The current display time seems accurate, so use that.
            start(cur_display + dur(g_stim_dur) / 1000);
        
        // this is to easy and might drift.
        //start(expire_time + dur(g_stim_dur / 1000));
    }
}

Teensy teensy
{
    on_event:init()
    {
    }

    on_event:triggered()
    {
        if (line == PHOTO_DIODE_PIN) {
            Output out;
            out.timestamp   = timestamp;
            out.logic_level = line_value;
            append(out);
        }
        else if (line == SPP_PIN) {
            if (line_value != 0) {
                array_append(spp_on,  timestamp);
            }
            else{
                array_append(spp_off, timestamp);
            }
        }
    }

    void append(Output out)
    {
        output.size = output.size + 1;
        output[output.size - 1] = out;
    }

    on_event:cleanup()
    {
        recordOutput();
    }
}

RawWindow test_window
{
    on_event:init()
    {
        position_and_size = 0, 0, 500, 500;
        // disable for testing with zep-1.4
        //alignment = ALIGN_CENTER, ALIGN_CENTER;

        if (os_name() == "Windows")
        {
            blit_full_window = true;
//            flush_after_blit = true;  // don't use
        }
        else
        {
            flush_after_blit = true;
        }
 
        show();
    }

    on_event:show()
    {
        // Get keyboard focus when shown.
        activate();
    }
}

/**
 * The test_page presents one big grayish screens with 3 black/white rectangles.
 *
 * The rectangles overlap each other in space but are presented interleaved
 * in time. The black rectangles are presented first and then the white's.
 */
Page test_page
{

    on_event:init()
    {
        println("The next keys can be pressed for the following functions:\n\n");
        println("s\tStart the task.\n");
        println("Esc\tstop the experiment\n");

        println("F1\tput the window on the first head.");
        println("F2\tput the window on the second head.");
        println("F3\tput the window on the third head.");
        println("F4\tput the window on the fourth head.");
        println("F5\tswitch window width.");
        println("F6\tswitch window height.");
        println("F7\ttoggle blit full window (true for windows by default).");
        println("F8\ttoggle flush window after blit.");
        println("F10\t(un)maximize window.");
        println("F11\ttoggle full screen window.");
    }

    on_event:key_press()
    {
        if (input_key == KEY_Escape)
        {
            terminate;
        }
        else if (input_key == KEY_F1)
        {
            test_window.target_head = 0;
        }
        else if (input_key == KEY_F2)
        {
            if (display_device.num_heads >= 2)
                test_window.target_head = 1;
        }
        else if (input_key == KEY_F3)
        {
            if (display_device.num_heads >= 3)
                test_window.target_head = 2;
        }
        else if (input_key == KEY_F4)
        {
            if (display_device.num_heads >= 4)
                test_window.target_head = 3;
        }
        else if (input_key == KEY_F5)
        {
            if (test_window.width >= display_device.width / 2)
                test_window.size = 200, test_window.height;
            else
                test_window.size = display_device.width, test_window.height;
        }
        else if (input_key == KEY_F6)
        {
            if (test_window.height >= display_device.height / 2)
                test_window.size = test_window.width, 100;
            else
                test_window.size = test_window.width, display_device.height;
        }
        else if (input_key == KEY_F7)
        {
            if (input_modifiers & INPUT_MOD_CONTROL)
                test_window.blit_full_window = true;
            else
                test_window.blit_full_window = false;
        }
        else if (input_key == KEY_F8)
        {
            if (input_modifiers & INPUT_MOD_CONTROL)
                test_window.flush_after_blit = true;
            else
                test_window.flush_after_blit = false;
        }
        else if (input_key == KEY_F10)
        {
            test_window.is_maximized = !test_window.is_maximized;
        }
        else if (input_key == KEY_F11)
        {
            test_window.is_fullscreen = !test_window.is_fullscreen;
        }
        else if (input_key == 's' || input_key == 'S')
        {
            start_experiment();
        }
    }

    CanvasGadget canvas
    {
        on_event:init()
        {
            fill_pattern_color  = color:white;
        }

        RectangleShape rect // upper left corner
        {
            on_event:init()
            {
                width               = g_width;
                height              = g_height;
                fill_pattern_color  = rgbi:0/0/0;
            }

            on_event:pre_update()
            {
                if ((relative_frame / g_nframes) % 2 == 0)
                    is_visible = true;
                else
                    is_visible = false;
            }

            on_event:finish()
            {
                if (g_terminate_on_finish)
                    terminate;
            }
        }
    }

    void start_experiment ()
    {
        real expected_framedur = 
                real(display_device.refresh_interval[test_window.target_head]);
        expected_framedur = expected_framedur * 1000; // convert ms to Âµs
        real expected_stimdur  = g_nframes * expected_framedur;

        set_expected_durations(expected_framedur, expected_stimdur);
        int start_frame = display_device.current_frame_counter[
                test_window.target_head
                ];

        canvas.rect.start_fr(start_frame + g_fps/2 , g_tot_frames);
        teensy.register_input_trigger(PHOTO_DIODE_PIN);
        teensy.register_input_trigger(SPP_PIN);
        spp_timer.start(canvas.rect.expected_start_time);
    }
}

Timer autostart
{
    on_event:expire()
    {
        test_page.start_experiment();
    }
}

start()
{
    test_window.show_page(test_page);
    test_page.hide_cursor();
    string device = "/dev/ttyACM0";
    int port_addr = 0;

    display_device.open();
    if (error())
        terminate "Unable to open display device\n";
    
    if (have_option("dev"))
        device = option_value("dev");
    
    if (have_option("nframes")) {
        g_nframes = int(option_value("nframes"));
        if (g_nframes <= 0)
            terminate "option nframes has invalid value, nframes must be > 0\n";
    }

    if (have_option("target-head"))
        test_window.target_head = int (option_value("target-head"));

    if (have_flag("v") || have_flag("verbose"))
        g_verbose = true;

    if (have_option("fps")) {
       g_fps = int(option_value("fps"));
       if (g_fps <= 0)
           terminate "option fps has invalid value, fps must be > 0\n";
    }
    
    if (have_option("duration")) {
        dur test_dur = dur(option_value("duration"));
        int test_dur_sec = int(test_dur)/1000;
        if (test_dur_sec == 0)
            print_error("Invalid duration\n");
        else
            g_tot_frames = test_dur_sec * g_fps;
        println("g_nframes = " + g_tot_frames);
    }

    if(have_option("logfile"))
        g_fn = option_value("logfile");
    else
        g_fn = "output" + int(round(1.0/g_fps*1000)) + ".txt";

    if(have_flag("autostart"))
        autostart.start(now() + 1.5s);

    // Setup parallel port.
    spp.open(port_addr);
    if(!spp.is_open) {
        println("Unable to open parallel port: " + port_addr);
        terminate;
    }
    spp.data_is_output = true;
    spp.data_output_mask = 0xFF;
    spp.write_data(0XFF);

    teensy.open(device);
    if(error()) {
        terminate "Unable to open teensy.";
    }
    
    // reallocating memory might prove expensive.
    output.capacity = 60 * 60 + 10;
}

